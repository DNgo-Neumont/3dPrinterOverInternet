package dngo.neumont.rabbitmqcontroller;

import com.rabbitmq.client.BuiltinExchangeType;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeoutException;

import static java.time.temporal.ChronoUnit.SECONDS;


@SpringBootApplication(exclude = {UserDetailsServiceAutoConfiguration.class}) //Excludes default autogenerated user
//And only allows for JWT authentication from what I can garner.
public class RabbitMqControllerApplication {

    private final static String rabbitHost = System.getenv("RABBITMQ_HOST");
    private final static int rabbitPort = Integer.parseInt(System.getenv("RABBITMQ_PORT"));

    private final static String rabbitUser = System.getenv("RABBITMQ_USER");

    private final static String rabbitPass = System.getenv("RABBITMQ_PASS");

    private final static String rabbitVhost = System.getenv("RABBITMQ_VHOST");

    private final static Logger logger = LoggerFactory.getLogger(RabbitController.class);

    private static ConnectionFactory connectionFactory = new ConnectionFactory();


    public static void main(String[] args) {

        connectionFactory.setConnectionTimeout(10000);
        connectionFactory.setAutomaticRecoveryEnabled(true);

        connectionFactory.setHost(rabbitHost);
        connectionFactory.setPort(rabbitPort);
        connectionFactory.setUsername(rabbitUser);
        connectionFactory.setPassword(rabbitPass);
        connectionFactory.setVirtualHost(rabbitVhost);

        SpringApplication.run(RabbitMqControllerApplication.class, args);
    }

    public static Channel getNewChannel() {
        try{
            Connection connection = connectionFactory.newConnection();
            return connection.createChannel();
        }catch(Exception e){
            e.printStackTrace();
            logger.error("Failed to connect to RabbitMQ server! Stacktrace provided");

            LocalDateTime timeNow = LocalDateTime.now();

            while(SECONDS.between(timeNow, LocalDateTime.now()) < 60){
                try{
                    Thread.sleep(1000);
                    Connection connection = connectionFactory.newConnection();
                    return connection.createChannel();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    logger.error("Error attempting to establish a new connection, retrying...");

                }
            }

            throw new RuntimeException(e);

        }
    }

}
